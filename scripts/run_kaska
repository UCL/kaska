#!/bin/env python

""" Script to run Kaska.

A "config file" of values is required. This helps reproducibility.

Usage:
python run_kaska --config_file=<file> [--disable_debug_log] | --help

<file> must be a YAML file, similar in format to the config.yaml example.
"""

import argparse
import datetime as dt
import yaml

from kaska.entry import run_process

# Default values of optional parameters
default_block_size = 256
debug = True

# List of missing required values
missing = []


def str2date(string):
    """ Create and return a datetime object from a string.

    Keyword arguments:
    string -- The string to convert, e.g. "20191121" for 21st Nov 2019.
    """
    return dt.datetime.strptime(string, '%Y%m%d')


def check_value(param, dict):
    """ Check that a parameter in a dictionary has a sensible
    value, e.g. it isn't None or an empty string.

    If the parameter is an optional one, and no value is supplied,
    it takes the default value for that parameter.

    For other parameters - i.e. the required ones - if any are missing
    they are added to the global missing list, used later to alert
    the user and terminate the program (if missing is not empty).

    If the parameter value appears to be valid, that value is returned.

    Keyword arguments:
    param -- Name of the parameter, e.g. "start_date"
    dict -- The dictionary which contains the parameter names and values.

    """
    if param in dict:
        value = dict[param]
        if (value is not None) and (value != ""):
            return value
        else:
            if (param == "block_size"):
                return default_block_size
            else:
                missing.append(param)
    else:
        if (param == "block_size"):
            return default_block_size
        else:
            missing.append(param)


def parse_file(filename):
    """ Open a file in YAML format and obtain a dictionary
    with the values from it. Check each value, then return
    the dictionary.

    An example file in the required format is config.yaml.

    Keyword arguments:
    filename -- Path to the YAML file.
    """
    with open(filename) as stream:
        try:
            config = yaml.safe_load(stream)
            print(config)
            global debug
            if not debug:
                print("Debug log output disabled.")
                debug = False
            else:
                print("Debug log output enabled.")
                debug = True

            # The following parameters are all required:
            start_date = check_value("start_date", config)
            end_date = check_value("end_date", config)
            temporal_grid_space = check_value("temporal_grid_space", config)
            # parent_folder = check_value("parent_folder", config)
            s2_folder = check_value("s2_folder", config)
            s1_ncfile = check_value("s1_ncfile", config)
            state_mask = check_value("state_mask", config)
            output_folder = check_value("output_folder", config)

            # Special case - optional parameter
            block_size = check_value("block_size", config)
            config["block_size"] = block_size

            if len(missing) > 0:
                print("ERROR: The following required parameter(s) need to " +
                      "be set in the config file:")
                print(missing)
                exit()

            if (debug):
                print("Debug log output is ON")
                print("Using config file: " + str(filename))
                print("start_date=" + str(start_date))
                print("end_date=" + str(end_date))
                print("temporal_grid_space=" + str(temporal_grid_space))
                #print("parent_folder=" + str(parent_folder))
                print("s2_folder=" + str(s2_folder))
                print("s1_ncfile=" + str(s1_ncfile)) 
                print("state_mask=" + str(state_mask))
                print("output_folder=" + str(output_folder))
                print("block_size=" + str(block_size))

            return config

        except yaml.YAMLError as exc:
            print(exc)


# Define and parse user arguments
parser = argparse.ArgumentParser(description='Run the KaSKA analysis '
                                 'for given time grid, data, and state mask.')

parser.add_argument('--config_file',
                    help="The YAML-format config file you are using " +
                    "(instead of command-line args)")

parser.add_argument('--disable_debug_log', action='store_true', default=False,
                    help='Disable the debug-level logging, leaving only ' +
                    'info-level logging on. By default, logging reports ' +
                    'debug messages as well.')

args = parser.parse_args()

if (args.disable_debug_log):
    debug = False

# Config file present, with or without --disable_debug_log option
if (args.config_file):
    mydict = parse_file(args.config_file)

    run_process(str2date(str(mydict["start_date"])),
                str2date(str(mydict["end_date"])),
                mydict["temporal_grid_space"],
                mydict["s2_folder"],
                mydict["s1_ncfile"],
                mydict["state_mask"],
                mydict["output_folder"],
                debug=debug,
                block_size=[mydict["block_size"], mydict["block_size"]])

# No config file present
else:
    print("\nPlease specify a config file with --config_file option.\n")
